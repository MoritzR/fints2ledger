name: binaries

on:
  workflow_dispatch:


permissions:
  contents: read

jobs:
  build-binaries:
    name: ${{ matrix.os }} / create binary
    runs-on: ${{ matrix.os }}
    container: alpine:latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install general tools with system package manager
      run: |
        apk --no-cache add binutils-gold curl gcc g++ git gmp-dev ncurses-dev ncurses-static libffi-dev make xz tar perl zlib-dev zlib-static

    - uses: haskell-actions/setup@v2
      id: setup
      with:
        ghc-version: '9.10'

    - name: Configure the build
      run: |
        cabal configure --disable-tests --disable-benchmarks --disable-documentation
        cabal build --dry-run
      # The last step generates dist-newstyle/cache/plan.json for the cache key.

    - name: Restore cached dependencies
      uses: actions/cache/restore@v4
      id: cache
      env:
        key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}-

    - name: Install dependencies
      # If we had an exact cache hit, the dependencies will be up to date.
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cabal build --only-dependencies

    # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
    - name: Save cached dependencies
      uses: actions/cache/save@v4
      # If we had an exact cache hit, trying to save the cache would error because of key clash.
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}

    - name: Build and install artifact
      run: |
          export ARTIFACTS=${{ runner.os }}/fints2ledger
          mkdir -p ${ARTIFACTS}
          cabal install --installdir="${ARTIFACTS}" --install-method=copy --enable-executable-static
          strip "${ARTIFACTS}/fints2ledger"

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}
        path: ${{ runner.os }}
